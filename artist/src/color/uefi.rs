use crate::Hue;

/// A color that can be put in a pixel
#[derive(Copy, Clone, PartialEq, Debug, Eq)]
#[repr(C)]
pub struct Color {
    pub blue: u8,
    pub green: u8,
    pub red: u8,
    pub reserved: u8
}

impl Color {
    pub const Black: u32       = Self::vga_index_to_color_u32(0);
    pub const Blue: u32        = Self::vga_index_to_color_u32(1);
    pub const Green: u32       = Self::vga_index_to_color_u32(2);
    pub const Cyan: u32        = Self::vga_index_to_color_u32(3);
    pub const Red: u32         = Self::vga_index_to_color_u32(4);
    pub const Magenta: u32     = Self::vga_index_to_color_u32(5);
    pub const Brown: u32       = Self::vga_index_to_color_u32(6);
    pub const LightGray: u32   = Self::vga_index_to_color_u32(7);
    pub const DarkGray: u32    = Self::vga_index_to_color_u32(8);
    pub const LightBlue: u32   = Self::vga_index_to_color_u32(9);
    pub const LightGreen: u32  = Self::vga_index_to_color_u32(10);
    pub const LightCyan: u32   = Self::vga_index_to_color_u32(11);
    pub const LightRed: u32    = Self::vga_index_to_color_u32(12);
    pub const Pink: u32        = Self::vga_index_to_color_u32(13);
    pub const Yellow: u32      = Self::vga_index_to_color_u32(14);
    pub const White: u32       = Self::vga_index_to_color_u32(15);
    pub const Purple: u32      = Self::vga_index_to_color_u32(0x6a);

    /// Creates a new instance of the color
    pub fn new(color: u32) -> Self {
        Self {
            blue: (color >> 24 & 0xff) as u8,
            green: (color >> 16 & 0xff) as u8,
            red: (color >> 8 & 0xff) as u8,
            reserved: 0
        }
    }

    /// Converts an array of form [red, green, blue] to a Color
    const fn from_rgb_array(rgb: [u8; 3]) -> Color {
        Color {
            blue: rgb[2],
            green: rgb[1],
            red: rgb[0],
            reserved: 0
        }
    }

    /// Converts a VGA index in 320x200 VGA mode to a u32
    /// of the form blue, green, red, reserved
    const fn vga_index_to_color_u32(i: usize) -> u32 {
        let [red, green, blue] = vga_index_to_rgb_array[i];
        u32::from_be_bytes([blue, green, red, 0])
    }
}

impl Hue for Color {
    /// Converts a byte in the color indexed bitmap pixel array to
    /// a color
    ///
    /// Since the bytes in the bitmap pixel array are 320x200 mode VGA colors, then
    /// they need to be mapped to their 32 bit equivalents
    fn from_bitmap_data(raw_color: u8) -> Self {
        Self::from_rgb_array(vga_index_to_rgb_array[raw_color as usize])
    }

    /// Returns a color into its numerical representation
    fn to_num(&self) -> u32 {
        u32::from_le_bytes([self.blue, self.green, self.red, 0])
    }
}

const vga_index_to_rgb_array: [[u8; 3]; 256] = [
    [0, 0, 0, ],
    [0, 0, 168, ],
    [0, 168, 0, ],
    [0, 168, 168, ],
    [168, 0, 0, ],
    [168, 0, 168, ],
    [168, 87, 0, ],
    [168, 168, 168, ],
    [87, 87, 87, ],
    [87, 87, 255, ],
    [87, 255, 87, ],
    [87, 255, 255, ],
    [255, 87, 87, ],
    [255, 87, 255, ],
    [255, 255, 87, ],
    [255, 255, 255, ],
    [0, 0, 0, ],
    [23, 23, 23, ],
    [32, 32, 32, ],
    [47, 47, 47, ],
    [56, 56, 56, ],
    [71, 71, 71, ],
    [80, 80, 80, ],
    [96, 96, 96, ],
    [112, 112, 112, ],
    [128, 128, 128, ],
    [144, 144, 144, ],
    [160, 160, 160, ],
    [183, 183, 183, ],
    [200, 200, 200, ],
    [224, 224, 224, ],
    [255, 255, 255, ],
    [0, 0, 255, ],
    [64, 0, 255, ],
    [127, 0, 255, ],
    [191, 0, 255, ],
    [255, 0, 255, ],
    [255, 0, 191, ],
    [255, 0, 127, ],
    [255, 0, 64, ],
    [255, 0, 0, ],
    [255, 64, 0, ],
    [255, 127, 0, ],
    [255, 191, 0, ],
    [255, 255, 0, ],
    [191, 255, 0, ],
    [127, 255, 0, ],
    [64, 255, 0, ],
    [0, 255, 0, ],
    [0, 255, 64, ],
    [0, 255, 127, ],
    [0, 255, 191, ],
    [0, 255, 255, ],
    [0, 191, 255, ],
    [0, 127, 255, ],
    [0, 64, 255, ],
    [127, 127, 255, ],
    [159, 127, 255, ],
    [191, 127, 255, ],
    [223, 127, 255, ],
    [255, 127, 255, ],
    [255, 127, 223, ],
    [255, 127, 191, ],
    [255, 127, 159, ],
    [255, 127, 127, ],
    [255, 159, 127, ],
    [255, 191, 127, ],
    [255, 223, 127, ],
    [255, 255, 127, ],
    [223, 255, 127, ],
    [191, 255, 127, ],
    [159, 255, 127, ],
    [127, 255, 127, ],
    [127, 255, 159, ],
    [127, 255, 191, ],
    [127, 255, 223, ],
    [127, 255, 255, ],
    [127, 223, 255, ],
    [127, 191, 255, ],
    [127, 159, 255, ],
    [183, 183, 255, ],
    [199, 183, 255, ],
    [216, 183, 255, ],
    [232, 183, 255, ],
    [255, 183, 255, ],
    [255, 183, 232, ],
    [255, 183, 216, ],
    [255, 183, 199, ],
    [255, 183, 183, ],
    [255, 199, 183, ],
    [255, 216, 183, ],
    [255, 232, 183, ],
    [255, 255, 183, ],
    [232, 255, 183, ],
    [216, 255, 183, ],
    [199, 255, 183, ],
    [183, 255, 183, ],
    [183, 255, 199, ],
    [183, 255, 216, ],
    [183, 255, 232, ],
    [183, 255, 255, ],
    [183, 232, 255, ],
    [183, 216, 255, ],
    [183, 199, 255, ],
    [0, 0, 112, ],
    [31, 0, 112, ],
    [56, 0, 112, ],
    [87, 0, 112, ],
    [112, 0, 112, ],
    [112, 0, 87, ],
    [112, 0, 56, ],
    [112, 0, 31, ],
    [112, 0, 0, ],
    [112, 31, 0, ],
    [112, 56, 0, ],
    [112, 87, 0, ],
    [112, 112, 0, ],
    [87, 112, 0, ],
    [56, 112, 0, ],
    [31, 112, 0, ],
    [0, 112, 0, ],
    [0, 112, 31, ],
    [0, 112, 56, ],
    [0, 112, 87, ],
    [0, 112, 112, ],
    [0, 87, 112, ],
    [0, 56, 112, ],
    [0, 31, 112, ],
    [56, 56, 112, ],
    [71, 56, 112, ],
    [87, 56, 112, ],
    [96, 56, 112, ],
    [112, 56, 112, ],
    [112, 56, 96, ],
    [112, 56, 87, ],
    [112, 56, 71, ],
    [112, 56, 56, ],
    [112, 71, 56, ],
    [112, 87, 56, ],
    [112, 96, 56, ],
    [112, 112, 56, ],
    [96, 112, 56, ],
    [87, 112, 56, ],
    [71, 112, 56, ],
    [56, 112, 56, ],
    [56, 112, 71, ],
    [56, 112, 87, ],
    [56, 112, 96, ],
    [56, 112, 112, ],
    [56, 96, 112, ],
    [56, 87, 112, ],
    [56, 71, 112, ],
    [80, 80, 112, ],
    [88, 80, 112, ],
    [96, 80, 112, ],
    [104, 80, 112, ],
    [112, 80, 112, ],
    [112, 80, 104, ],
    [112, 80, 96, ],
    [112, 80, 88, ],
    [112, 80, 80, ],
    [112, 88, 80, ],
    [112, 96, 80, ],
    [112, 104, 80, ],
    [112, 112, 80, ],
    [104, 112, 80, ],
    [96, 112, 80, ],
    [88, 112, 80, ],
    [80, 112, 80, ],
    [80, 112, 88, ],
    [80, 112, 96, ],
    [80, 112, 104, ],
    [80, 112, 112, ],
    [80, 104, 112, ],
    [80, 96, 112, ],
    [80, 88, 112, ],
    [0, 0, 64, ],
    [16, 0, 64, ],
    [32, 0, 64, ],
    [48, 0, 64, ],
    [64, 0, 64, ],
    [64, 0, 48, ],
    [64, 0, 32, ],
    [64, 0, 16, ],
    [64, 0, 0, ],
    [64, 16, 0, ],
    [64, 32, 0, ],
    [64, 48, 0, ],
    [64, 64, 0, ],
    [48, 64, 0, ],
    [32, 64, 0, ],
    [16, 64, 0, ],
    [0, 64, 0, ],
    [0, 64, 16, ],
    [0, 64, 32, ],
    [0, 64, 48, ],
    [0, 64, 64, ],
    [0, 48, 64, ],
    [0, 32, 64, ],
    [0, 16, 64, ],
    [32, 32, 64, ],
    [40, 32, 64, ],
    [48, 32, 64, ],
    [56, 32, 64, ],
    [64, 32, 64, ],
    [64, 32, 56, ],
    [64, 32, 48, ],
    [64, 32, 40, ],
    [64, 32, 32, ],
    [64, 40, 32, ],
    [64, 48, 32, ],
    [64, 56, 32, ],
    [64, 64, 32, ],
    [56, 64, 32, ],
    [48, 64, 32, ],
    [40, 64, 32, ],
    [32, 64, 32, ],
    [32, 64, 40, ],
    [32, 64, 48, ],
    [32, 64, 56, ],
    [32, 64, 64, ],
    [32, 56, 64, ],
    [32, 48, 64, ],
    [32, 40, 64, ],
    [47, 47, 64, ],
    [48, 47, 64, ],
    [55, 47, 64, ],
    [63, 47, 64, ],
    [64, 47, 64, ],
    [64, 47, 63, ],
    [64, 47, 55, ],
    [64, 47, 48, ],
    [64, 47, 47, ],
    [64, 48, 47, ],
    [64, 55, 47, ],
    [64, 63, 47, ],
    [64, 64, 47, ],
    [63, 64, 47, ],
    [55, 64, 47, ],
    [48, 64, 47, ],
    [47, 64, 47, ],
    [47, 64, 48, ],
    [47, 64, 55, ],
    [47, 64, 63, ],
    [47, 64, 64, ],
    [47, 63, 64, ],
    [47, 55, 64, ],
    [47, 48, 64, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],

    /*[0, 0, 0],
    [0, 0, 168],
    [0, 168, 0],
    [0, 168, 168],
    [168, 0, 0],
    [168, 0, 168],
    [168, 87, 0	],
    [168, 168, 168],
    [87, 87, 87],
    [87,  87, 255],
    [87, 255,  87,],	
    [87, 255, 255],	
    [255,  87,  87],
    [255,  87, 255],
    [255, 255,  87],
    [255, 255, 255, ],
    [0, 0, 0, ],
    [23, 23, 23, ],
    [32, 32, 32, ],
    [47, 47, 47, ],
    [56, 56, 56, ],
    [71, 71, 71, ],
    [80, 80, 80, ],
    [96, 96, 96, ],
    [112, 112, 112, ],
    [128, 128, 128, ],
    [144, 144, 144, ],
    [160, 160, 160, ],
    [183, 183, 183, ],
    [200, 200, 200, ],
    [224, 224, 224, ],
    [255, 255, 255, ],
    [0, 0, 255, ],
    [64, 0, 255, ],
    [127, 0, 255, ],
    [191, 0, 255, ],
    [255, 0, 255, ],
    [255, 0, 191, ],
    [255, 0, 127, ],
    [255, 0, 64, ],
    [255, 0, 0, ],
    [255, 64, 0, ],
    [255, 127, 0, ],
    [255, 191, 0, ],
    [255, 255, 0, ],
    [191, 255, 0, ],
    [127, 255, 0, ],
    [64, 255, 0, ],
    [0, 255, 0, ],
    [0, 255, 64, ],
    [0, 255, 127, ],
    [0, 255, 191, ],
    [0, 255, 255, ],
    [0, 191, 255, ],
    [0, 127, 255, ],
    [0, 64, 255, ],
    [127, 127, 255, ],
    [159, 127, 255, ],
    [191, 127, 255, ],
    [223, 127, 255, ],
    [255, 127, 255, ],
    [255, 127, 223, ],
    [255, 127, 191, ],
    [255, 127, 159, ],
    [255, 127, 127, ],
    [255, 159, 127, ],
    [255, 191, 127, ],
    [255, 223, 127, ],
    [255, 255, 127, ],
    [223, 255, 127, ],
    [191, 255, 127, ],
    [159, 255, 127, ],
    [127, 255, 127, ],
    [127, 255, 159, ],
    [127, 255, 191, ],
    [127, 255, 223, ],
    [127, 255, 255, ],
    [127, 223, 255, ],
    [127, 191, 255, ],
    [127, 159, 255, ],
    [183, 183, 255, ],
    [199, 183, 255, ],
    [216, 183, 255, ],
    [232, 183, 255, ],
    [255, 183, 255, ],
    [255, 183, 232, ],
    [255, 183, 216, ],
    [255, 183, 199, ],
    [255, 183, 183, ],
    [255, 199, 183, ],
    [255, 216, 183, ],
    [255, 232, 183, ],
    [255, 255, 183, ],
    [232, 255, 183, ],
    [216, 255, 183, ],
    [199, 255, 183, ],
    [183, 255, 183, ],
    [183, 255, 199, ],
    [183, 255, 216, ],
    [183, 255, 232, ],
    [183, 255, 255, ],
    [183, 232, 255, ],
    [183, 216, 255, ],
    [183, 199, 255, ],
    [0, 0, 112, ],
    [31, 0, 112, ],
    [56, 0, 112, ],
    [87, 0, 112, ],
    [112, 0, 112, ],
    [112, 0, 87, ],
    [112, 0, 56, ],
    [112, 0, 31, ],
    [112, 0, 0, ],
    [112, 31, 0, ],
    [112, 56, 0, ],
    [112, 87, 0, ],
    [112, 112, 0, ],
    [87, 112, 0, ],
    [56, 112, 0, ],
    [31, 112, 0, ],
    [0, 112, 0, ],
    [0, 112, 31, ],
    [0, 112, 56, ],
    [0, 112, 87, ],
    [0, 112, 112, ],
    [0, 87, 112, ],
    [0, 56, 112, ],
    [0, 31, 112, ],
    [56, 56, 112, ],
    [71, 56, 112, ],
    [87, 56, 112, ],
    [96, 56, 112, ],
    [112, 56, 112, ],
    [112, 56, 96, ],
    [112, 56, 87, ],
    [112, 56, 71, ],
    [112, 56, 56, ],
    [112, 71, 56, ],
    [112, 87, 56, ],
    [112, 96, 56, ],
    [112, 112, 56, ],
    [96, 112, 56, ],
    [87, 112, 56, ],
    [71, 112, 56, ],
    [56, 112, 56, ],
    [56, 112, 71, ],
    [56, 112, 87, ],
    [56, 112, 96, ],
    [56, 112, 112, ],
    [56, 96, 112, ],
    [56, 87, 112, ],
    [56, 71, 112, ],
    [80, 80, 112, ],
    [88, 80, 112, ],
    [96, 80, 112, ],
    [104, 80, 112, ],
    [112, 80, 112, ],
    [112, 80, 104, ],
    [112, 80, 96, ],
    [112, 80, 88, ],
    [112, 80, 80, ],
    [112, 88, 80, ],
    [112, 96, 80, ],
    [112, 104, 80, ],
    [112, 112, 80, ],
    [104, 112, 80, ],
    [96, 112, 80, ],
    [88, 112, 80, ],
    [80, 112, 80, ],
    [80, 112, 88, ],
    [80, 112, 96, ],
    [80, 112, 104, ],
    [80, 112, 112, ],
    [80, 104, 112, ],
    [80, 96, 112, ],
    [80, 88, 112, ],
    [0, 0, 64, ],
    [16, 0, 64, ],
    [32, 0, 64, ],
    [48, 0, 64, ],
    [64, 0, 64, ],
    [64, 0, 48, ],
    [64, 0, 32, ],
    [64, 0, 16, ],
    [64, 0, 0, ],
    [64, 16, 0, ],
    [64, 32, 0, ],
    [64, 48, 0, ],
    [64, 64, 0, ],
    [48, 64, 0, ],
    [32, 64, 0, ],
    [16, 64, 0, ],
    [0, 64, 0, ],
    [0, 64, 16, ],
    [0, 64, 32, ],
    [0, 64, 48, ],
    [0, 64, 64, ],
    [0, 48, 64, ],
    [0, 32, 64, ],
    [0, 16, 64, ],
    [32, 32, 64, ],
    [40, 32, 64, ],
    [48, 32, 64, ],
    [56, 32, 64, ],
    [64, 32, 64, ],
    [64, 32, 56, ],
    [64, 32, 48, ],
    [64, 32, 40, ],
    [64, 32, 32, ],
    [64, 40, 32, ],
    [64, 48, 32, ],
    [64, 56, 32, ],
    [64, 64, 32, ],
    [56, 64, 32, ],
    [48, 64, 32, ],
    [40, 64, 32, ],
    [32, 64, 32, ],
    [32, 64, 40, ],
    [32, 64, 48, ],
    [32, 64, 56, ],
    [32, 64, 64, ],
    [32, 56, 64, ],
    [32, 48, 64, ],
    [32, 40, 64, ],
    [47, 47, 64, ],
    [48, 47, 64, ],
    [55, 47, 64, ],
    [63, 47, 64, ],
    [64, 47, 64, ],
    [64, 47, 63, ],
    [64, 47, 55, ],
    [64, 47, 48, ],
    [64, 47, 47, ],
    [64, 48, 47, ],
    [64, 55, 47, ],
    [64, 63, 47, ],
    [64, 64, 47, ],
    [63, 64, 47, ],
    [55, 64, 47, ],
    [48, 64, 47, ],
    [47, 64, 47, ],
    [47, 64, 48, ],
    [47, 64, 55, ],
    [47, 64, 63, ],
    [47, 64, 64, ],
    [47, 63, 64, ],
    [47, 55, 64, ],
    [47, 48, 64, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    [0, 0, 0, ],
    */
];

impl PartialEq<u32> for Color {
    fn eq(&self, rhs: &u32) -> bool {
        ((self.blue as u32) << 24 | (self.green as u32) << 16 | (self.red as u32) << 8)
            == *rhs
    }
}

pub type EFIGraphicsOutputBltPixel = Color;